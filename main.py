# coding: utf8
from telegram.ext import Updater
from telegram.ext import MessageHandler, CallbackQueryHandler, CommandHandler, Filters
# from telegram import InlineKeyboardMarkup, InlineKeyboardButton
# from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
# from telegram import File
import logging
# import time
# import os

token = '1038469498:AAGeQ16BovO3kVyr2PRUnVaruxDtFzzNVVY'
request_kwargs = {
    'proxy_url': 'socks5h://185.162.131.46:11084'
}
proxy_list = [
    '69.4.86.195:61901',
    '185.130.105.66:11084',
    '31.148.220.141:11084',
    '185.162.131.46:11084',
]


#############  bot  #############
chats = {
    'admins_group_chat_id':-353048395
}
### Commands_Handler ###                                                                ## –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
def start(bot, update):  # —Å—Ç–∞—Ä—Ç
    message = update.message
    name = message['chat']['first_name']
    bot.send_message(chat_id=message.chat_id,
                     text=otvet1(name),
                     reply_markup=askAQuestionKB())


### Message_Handler ###                                                                 ## –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
def message_handler(bot, update, group=None):
    message = update.message
    text = message.text
    chat_id = message.chat_id
    message_id = message.message_id
    name = message['chat']['first_name']
    if text == cancel['text']:
        bot.send_message(chat_id=chat_id,
                         text=otvet1(name),
                         reply_markup=askAQuestionKB())
        return
    if chat_id != chats['admins_group_chat_id']:
        bot.send_message(chat_id=chats['admins_group_chat_id'],
                         text=group)
        bot.forward_message(chat_id=chats['admins_group_chat_id'],
                            from_chat_id=chat_id,
                            message_id=message_id,
                            )
        bot.send_message(chat_id=chat_id,
                         text=otvet3())
    elif (chat_id == chats['admins_group_chat_id'] or chat_id == chats['rent_group_chat_id']) and update.message.reply_to_message:
        bot.forward_message(chat_id=update.message.reply_to_message.forward_from.id,
                            from_chat_id=update.message.reply_to_message.forward_from.id,
                            message_id=message.reply_to_message.message_id-1)
        bot.send_message(chat_id=update.message.reply_to_message.forward_from.id,
                         text=f'–û—Ç–≤–µ—Ç:\n{text}')


### Callback_Handler ###

def callback_handler(bot, update):                                                  ## –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    if data == ask_a_question_support['callback_data']:
        bot.delete_message(chat_id=chat_id,
                           message_id=message_id)
        bot.send_message(chat_id=chat_id,
                         text=otvet2(),
                         reply_markup=cancelKB())
        message_handler(bot,updater.update_queue.get(),group='–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å:')
    elif data == ask_a_question_rent['callback_data']:
        bot.delete_message(chat_id=chat_id,
                           message_id=message_id)
        bot.send_message(chat_id=chat_id,
                         text=otvet_rent(),
                         reply_markup=cancelKB())
        bot.send_message(chat_id=chat_id,
                         text=otvet2())
        message_handler(bot, updater.update_queue.get(),group='–ê—Ä–µ–Ω–¥–∞:')
### Other func ###


#############  keyboard  #############
### keys ###
instagrams = {
    'text': 'Instagram –ª–æ–≥–∏–Ω—ã –∏–∑ VK',
    'callback_data': 'instagrams'
}
ask_a_question_support = {
    'text':'–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∏ üì†',
    'callback_data':'question'
}
ask_a_question_rent = {
    'text':'–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ –ø–æ –ê—Ä–µ–Ω–¥–µ üí∂',
    'callback_data':'rent'
}
cancel = {
    'text':'–û—Ç–º–µ–Ω–∞',
    'callback_data':'cancel'
}

### KBs ###
def askAQuestionKB ():
    keyboard = [
        [InlineKeyboardButton(text=ask_a_question_support['text'], callback_data=ask_a_question_support['callback_data'])],
        [InlineKeyboardButton(text=ask_a_question_rent['text'],callback_data=ask_a_question_rent['callback_data'])]
    ]
    return InlineKeyboardMarkup(keyboard)

def cancelKB():
    keyboard = [
        [KeyboardButton(text=cancel['text'])]
    ]
    return ReplyKeyboardMarkup(keyboard,one_time_keyboard=True,resize_keyboard=True)
#############  message  #############
def main_menu_message():
    return '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:'
def otvet1(name):
    return f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}!\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç Clara, —è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ì–ö –û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞ –ü–ª—é—Å!\n\n–ß–µ–º –ø–æ–≥—É –ø–æ–º–æ—á—å?'
def otvet2():
    return '–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–µ.'
def otvet3():
    return '–Ø –ø–µ—Ä–µ–¥–∞–ª–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞ –ü–ª—é—Å! –û—á–µ–Ω—å —Å–∫–æ—Ä–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç!'
def otvet_rent():
    return '–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∏ –≤ –∞—Ä–µ–Ω–¥—É –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n'
#############  handler  #############
updater = Updater(token=token)#,
                  #request_kwargs=request_kwargs)
updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CallbackQueryHandler(callback_handler))
updater.dispatcher.add_handler(MessageHandler(Filters.text, message_handler))
updater.start_polling()
#############  logger  #############
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
